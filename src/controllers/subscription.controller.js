import mongoose from "mongoose";
import { User } from "../models/user.model.js";
import { Subscription } from "../models/subscription.model.js";
import { ApiError } from "../utils/ApiError.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import { asyncHandler } from "../utils/asyncHandler.js";


// toggle subscription (subscribe/unsubscribe)
const toggleSubscription = asyncHandler(async (req, res) => {
    const { channelId } = req.params
    // TODO: toggle subscription
    if (!mongoose.Types.ObjectId.isValid(channelId)) {
        throw new ApiError(400, "channelId is invalid");
    }

    if (req.user._id.toString() === channelId) {
        throw new ApiError(400, "You cannot subscribe to yourself");
    }

    const channel = await User.findById(channelId);
    if (!channel) {
        throw new ApiError(404, "Channel not found");
    }

    const existingSubscription = await Subscription.findOne({
        subscriber: req.user._id,
        channel: channelId,
    });

    if (existingSubscription) {
        // ‚ùå Mistake before: passed the whole object to findByIdAndDelete
        // ‚úÖ Fix: use existingSubscription._id
        await Subscription.findByIdAndDelete(existingSubscription._id);
        return res
            .status(200)
            .json(new ApiResponse(200, null, "Unsubscribed successfully"));
    } else {
        const subscription = await Subscription.create({
            subscriber: req.user._id,
            channel: channelId,
        })
        return res
            .status(201)
            .json(new ApiResponse(201, subscription, "Subscribed successfully"));
    }
})


// controller to return subscriber list of a channel
const getUserChannelSubscribers = asyncHandler(async (req, res) => {
    const { channelId } = req.params

    if (!mongoose.Types.ObjectId.isValid(channelId)) {
        throw new ApiError(400, "channelId is invalid");
    }
    if (req.user._id.toString() === channelId) {
        // ‚ùå Mistake: unclear message ("no channel")
        // ‚úÖ Better: you may skip or give a proper message
        throw new ApiError(400, "You cannot fetch your own channel this way");
    }

    const channel = await User.findById(channelId);
    if (!channel) {
        throw new ApiError(404, "Channel not found");
    }

    // Always remember ‚Äî when using .find() with .populate(), you must await the final query.
    // ‚ùå Mistake before: did not await .populate()
    // ‚úÖ Fix: chain .populate() and await it directly
    const subscribers = await Subscription.find({ channel: channelId })
        .populate("subscriber")

    return res
        .status(200)
        .json(new ApiResponse(200, subscribers, "subscribers fetched"))

})


// controller to return channel list to which user has subscribed
const getSubscribedChannels = asyncHandler(async (req, res) => {
    const { subscriberId } = req.params

    if (!mongoose.Types.ObjectId.isValid(subscriberId)) {
        throw new ApiError(400, "subscriberId is invalid");
    }

    const subscriberedchannel = await User.findById(subscriberId);
    if (!subscriberedchannel) {
        // ‚ùå Mistake before: wrong error message ("subscribed channels not found")
        // ‚úÖ Fix: it should be about the subscriber
        throw new ApiError(404, "Subscriber not found");
    }

    // ‚ùå Mistake before: wrote wrong field ("subs" instead of subscriber)
    // ‚úÖ Fix: correct query is { subscriber: subscriberId }
    // ‚ùå Mistake before: did not await .populate("channel")
    const channels = await Subscription.find({ subscriber: subscriberId })
        .populate("channel")

    return res
        .status(200)
        .json(new ApiResponse(200, channels, "subscribers fethed"))

})

export {
    toggleSubscription,
    getUserChannelSubscribers,
    getSubscribedChannels
}

/* 
====================== üîë SUMMARY: MISTAKES MADE ======================

1. ‚ùå Using `findByIdAndDelete(existingSubscription)` 
   ‚Üí Wrong, because it needs an ID, not the whole object.
   ‚úÖ Use `existingSubscription._id`.

2. ‚ùå Forgetting to `await` .populate() 
   ‚Üí Without await, populate does not execute.
   ‚úÖ Always do: `await Model.find(...).populate("field")`.

3. ‚ùå Wrong query field in getSubscribedChannels
   ‚Üí Used `{ subs: channelId }`.
   ‚úÖ Correct: `{ subscriber: subscriberId }`.

4. ‚ùå Wrong / unclear error messages
   ‚Üí Example: "no channel" or "subscribed channels not found".
   ‚úÖ Use clear messages like "Channel not found" or "Subscriber not found".

5. ‚ùå Wrong status codes in some places
   ‚Üí Used 201 for GET requests.
   ‚úÖ Use 200 for successful GET, 201 for CREATE.

====================== üìå POINTS TO REMEMBER ======================

1. Always validate IDs with:
   if (!mongoose.Types.ObjectId.isValid(id)) throw ApiError(400, "Invalid ID");

2. For DELETE operations ‚Üí pass `_id`, not the full object.

3. When using `.populate()`, chain it before await:
   const data = await Model.find(...).populate("field");

4. GET requests ‚Üí status 200
   POST/CREATE ‚Üí status 201
   DELETE (success, no content) ‚Üí status 200 or 204

5. Error messages should be clear and specific. 
   (Helps in debugging and frontend integration.)

6. Keep consistent naming:
   - `subscriber` = who subscribes
   - `channel` = who gets subscribed to

==================================================================
*/